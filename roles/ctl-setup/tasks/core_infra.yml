---
# file: roles/ctl-setup/tasks/core_infra.yml

- name: Login to the controller
  uri:
    url: "https://{{ baseurl }}/platform/login"
    method: POST
    body_format: json
    body:
      credentials:
        type: "BASIC"
        username: "{{ email }}"
        password: "{{ password }}"
    status_code: 204
    validate_certs: False
  register: login

# Locations
- name: Check locations
  uri:
    url: "https://{{ baseurl }}/infrastructure/locations/{{ item }}"
    method: get
    headers:
      Cookie: "{{ login.set_cookie }}"
    status_code: 200, 404
    validate_certs: False
  loop:
    - "emea"
    - "us"
    - "aws"
    - "azure"
    - "gcp"
  register: check_locations

# - name: Output of last task
#   debug:
#     var: 
#       check_locations

- name: Create locations
  uri:
    url: "https://{{ baseurl }}/infrastructure/locations"
    method: POST
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ item.item }}"
        displayName: "{{ item.item }}"
        description: "Multipass environment"
      desiredState:
        type: "OTHER_LOCATION"
    status_code: 201
    validate_certs: False
  when: item.status != 200
  loop: "{{ check_locations.results }}"
  loop_control:
    label: "{{ item.item }}"

# Environments
- name: Check environments
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ item }}"
    method: GET
    headers:
      Cookie: "{{ login.set_cookie }}"
    status_code: 200, 404
    validate_certs: False
  loop:
    - "lab"
    - "dev"
    - "test"
    - "prod"
  register: check_environments

- name: Create environments
  uri:
    url: "https://{{ baseurl }}/services/environments"
    method: POST
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ item.item }}"
        displayName: "{{ item.item }} environment"
        description: "{{ item.item }} environment on {{ item.item }} infrastructure"

    status_code: 201
    validate_certs: False
  when: item.status != 200
  loop: "{{ check_environments.results }}"
  loop_control:
    label: "{{ item.item }}"

# - name: generate private key
#   local_action:
#     module: openssl_privatekey
#     path: "{{ server_cert_key_path }}/privatekey.pem"
#     size: 2048
#     type: RSA
#   register: privatekey

# Generate self signed certificate and uplod
# - name: create and csrs
#   local_action:
#     module: openssl_csr
#     path: "{{ server_cert_key_path }}/wildcard_{{ env }}_csr.pem"
#     privatekey_path: "{{ privatekey.filename }}"
#     organization_name: "{{ organization }}"
#     common_name: "*.{{ env }}.{{ subdomain }}"
#     country_name: "{{ country }}"
#   register: csr

# - name: generate certificate 
#   local_action:
#     module: openssl_certificate
#     path: "{{ server_cert_key_path }}/wildcard_{{ env }}_cert.pem"
#     privatekey_path: "{{ privatekey.filename }}"
#     csr_path: "{{ server_cert_key_path }}/wildcard_{{ env }}_csr.pem"
#     provider: selfsigned

# - name: Upload certificate
#   uri:
#     url: "https://{{ baseurl }}/services/environments/{{ env }}/certs/{{ env }}_wildcard"
#     method: PUT
#     headers:
#       Cookie: "{{ login.set_cookie }}"
#     body_format: json
#     body:
#       metadata:
#         name: "{{ env }}_wildcard"
#       desiredState:
#         type: PEM
#         privateKey: "{{ lookup( 'file', '{{ privatekey.filename }}') }}"
#         publicCert: "{{ lookup( 'file', '{{ server_cert_key_path }}/wildcard_{{ env }}_cert.pem' ) }}"
#         caCerts: []
#     status_code: 200,201
#     validate_certs: False

# - name: cleanup csrs and certs.
#   local_action:
#     module: file
#     path: "{{ item }}"
#     state: absent
#   with_fileglob:
#     - "{{ server_cert_key_path }}/wildcard*"

# Upload certificate
- name: Upload certificate
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ env }}/certs/{{ env }}_wildcard"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ env }}_wildcard"
      desiredState:
        type: PEM
        privateKey: "{{ lookup( 'file', '{{ certificate_path }}privkey.pem') }}"
        publicCert: "{{ lookup( 'file', '{{ certificate_path }}cert.pem' ) }}"
        caCerts: []
    status_code: 200,201,500
    validate_certs: False

# gateways
- name: check if gateways already exists
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ env }}/gateways/{{ item }}-gw"
    method: GET
    headers:
      Cookie: "{{ login.set_cookie }}"
    status_code: 200, 404
    validate_certs: False
  loop:
    - "www.lab.leyux.org"
    - "devportal.lab.leyux.org"
    - "juiceshop.lab.leyux.org"
    - "juiceapi.lab.leyux.org"
    - "petapi.lab.leyux.org"
  register: check_gateway

- name: create gateways
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ env }}/gateways"
    method: POST
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body: >
      { "metadata": { "name": "{{ item.item }}-gw" },
        "desiredState": {
          "ingress": {
            "uris": {
              "http://{{ item.item }}": {},
              "https://{{ item.item }}": {
                "tls": {
                  "certRef": {
                    "ref": "/services/environments/{{ env }}/certs/{{ env}}_wildcard"
                  },
                  "protocols": [
                    "TLSv1.2",
                    "TLSv1.3"
                  ],
                  "preferServerCipher": "ENABLED"
                }
              }
            },
            "placement": {
              "instanceRefs": [ { "ref": "/infrastructure/locations/{{ location }}/instances/{{ proxy }}" } ] 
            },
            "tls": {
              "certRef": {
                "ref": "/services/environments/{{ env }}/certs/{{ env }}_wildcard"
              },
              "preferServerCipher": "DISABLED"
            } 
          }
        }
      }
    status_code: 202
    validate_certs: False
  when: item.status != 200
  loop: "{{ check_gateway.results }}"
  loop_control:
    label: "{{ item.item }}"

