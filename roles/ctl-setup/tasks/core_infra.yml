---
# file: roles/ctl-setup/tasks/core_infra.yml

- name: Login to the controller
  uri:
    url: "https://{{ baseurl }}/platform/login"
    method: POST
    body_format: json
    body:
      credentials:
        type: "BASIC"
        username: "{{ email }}"
        password: "{{ password }}"
    status_code: 204
    validate_certs: False
  register: login

# Locations
- name: Create/configure locations
  uri:
    url: "https://{{ baseurl }}/infrastructure/locations/{{ item }}"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ item }}"
        displayName: "{{ item }}"
        description: "Multipass environment"
      desiredState:
        type: "OTHER_LOCATION"
    status_code: 200,201,202
    validate_certs: False
  loop:
    - "emea"
    - "us"
    - "aws"
    - "azure"
    - "gcp"

# Environments
- name: Create/configure environments
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ item }}"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ item }}"
        displayName: "{{ item }} environment"
        description: "{{ item }} environment on {{ item }} infrastructure"
    status_code: 200,201,202
    validate_certs: False
  loop:
    - "lab"
    - "dev"
    - "test"
    - "prod"

# - name: generate private key
#   local_action:
#     module: openssl_privatekey
#     path: "{{ server_cert_key_path }}/privatekey.pem"
#     size: 2048
#     type: RSA
#   register: privatekey

# Generate self signed certificate and uplod
# - name: create and csrs
#   local_action:
#     module: openssl_csr
#     path: "{{ server_cert_key_path }}/wildcard_{{ env }}_csr.pem"
#     privatekey_path: "{{ privatekey.filename }}"
#     organization_name: "{{ organization }}"
#     common_name: "*.{{ env }}.{{ subdomain }}"
#     country_name: "{{ country }}"
#   register: csr

# - name: generate certificate 
#   local_action:
#     module: openssl_certificate
#     path: "{{ server_cert_key_path }}/wildcard_{{ env }}_cert.pem"
#     privatekey_path: "{{ privatekey.filename }}"
#     csr_path: "{{ server_cert_key_path }}/wildcard_{{ env }}_csr.pem"
#     provider: selfsigned

# - name: Upload certificate
#   uri:
#     url: "https://{{ baseurl }}/services/environments/{{ env }}/certs/{{ env }}_wildcard"
#     method: PUT
#     headers:
#       Cookie: "{{ login.set_cookie }}"
#     body_format: json
#     body:
#       metadata:
#         name: "{{ env }}_wildcard"
#       desiredState:
#         type: PEM
#         privateKey: "{{ lookup( 'file', '{{ privatekey.filename }}') }}"
#         publicCert: "{{ lookup( 'file', '{{ server_cert_key_path }}/wildcard_{{ env }}_cert.pem' ) }}"
#         caCerts: []
#     status_code: 200,201
#     validate_certs: False

# - name: cleanup csrs and certs.
#   local_action:
#     module: file
#     path: "{{ item }}"
#     state: absent
#   with_fileglob:
#     - "{{ server_cert_key_path }}/wildcard*"

# Upload certificate
- name: Upload certificate
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ env }}/certs/{{ env }}_wildcard"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ env }}_wildcard"
      desiredState:
        type: PEM
        privateKey: "{{ lookup( 'file', '{{ certificate_path }}privkey.pem') }}"
        publicCert: "{{ lookup( 'file', '{{ certificate_path }}cert.pem' ) }}"
        caCerts: []
    status_code: 200,201,500
    validate_certs: False

# Gateways
- name: Create/configure gateways
  uri:
    url: "https://{{ baseurl }}/services/environments/{{ env }}/gateways/{{ item }}-gw"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body: >
      { "metadata": { "name": "{{ item }}-gw" },
        "desiredState": {
          "ingress": {
            "uris": {
              "http://{{ item }}": {},
              "https://{{ item }}": {
                "tls": {
                  "certRef": {
                    "ref": "/services/environments/{{ env }}/certs/{{ env}}_wildcard"
                  },
                  "protocols": [
                    "TLSv1.2",
                    "TLSv1.3"
                  ],
                  "preferServerCipher": "ENABLED"
                }
              }
            },
            "placement": {
              "instanceRefs": [ { "ref": "/infrastructure/locations/{{ location }}/instances/{{ proxy }}" } ] 
            },
            "tls": {
              "certRef": {
                "ref": "/services/environments/{{ env }}/certs/{{ env }}_wildcard"
              },
              "preferServerCipher": "DISABLED"
            } 
          }
        }
      }
    status_code: 200,201,202
    validate_certs: False
  loop:
    - "www.lab.leyux.org"
    - "devportal.lab.leyux.org"
    - "juiceshop.lab.leyux.org"
    - "juiceapi.lab.leyux.org"
    - "petapi.lab.leyux.org"

# Developer portal
- name: Create developer portal 
  uri:
    url: "https://{{ baseurl }}/services/environments/lab/devportals/devportal"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body: >
      {
        "metadata": {
          "name": "devportal",
          "displayName": "DevPortal-LAB",
          "tags": [],
          "kind": "devportal"
        },
        "desiredState": {
          "ingress": {
            "gatewayRefs": [
              {
                "ref": "/services/environments/lab/gateways/devportal.lab.leyux.org-gw"
              }
            ]
          },
          "devPortalTheme": {
            "customConfig": {
              "fonts": {
                "assignments": {
                  "headings": {
                    "kind": "google-web-font",
                    "value": "Lato"
                  },
                  "body": {
                    "kind": "google-web-font",
                    "value": "Fira+Sans"
                  },
                  "code": {
                    "kind": "google-web-font",
                    "value": "IBM+Plex+Mono"
                  },
                  "cta": {
                    "kind": "google-web-font",
                    "value": "Lato"
                  },
                  "special": {
                    "kind": "google-web-font",
                    "value": "Lato"
                  }
                }
              },
              "primary": {
                "color": {
                  "primary": "#3b43be",
                  "accent": "#3b43be",
                  "fill": "#ffffff",
                  "ink": "#171d21"
                }
              },
              "secondary": {
                "color": {
                  "primary": "#3b43be",
                  "accent": "#ffffff",
                  "fill": "#f7f8fa",
                  "ink": "#2c3039",
                  "gray": "#272938"
                }
              }
            },
            "brandName": "NGINX+ DevPortal Demo"
          },
          "publishedApiRefs": [],
          "devPortalType": "private"
        }
      }
    status_code: 200, 201, 202
    validate_certs: False
