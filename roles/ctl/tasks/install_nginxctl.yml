---
# file: roles/ctl/tasks/install_nginxctl.yml

# Preparation
- name: install required packages
  yum:
    name: 
      - jq
      - yum-plugin-versionlock
      - socat
      - conntrack-tools
    state: latest
  become: yes
  
- name: temporary disable swap
  shell: "/usr/sbin/swapoff -a"
  become: yes
    
- name: "remove swap from /etc/fstab"
  lineinfile:
    path: /etc/fstab
    regexp: '\s+swap\s+'
    state: absent
    backup: yes
  become: yes

# Disabling ipv6 is only necessary with controller 3.7 to 3.9. 
# - name: set net.ipv6.conf.all.disable_ipv6 = 1
#   sysctl:
#     name: net.ipv6.conf.all.disable_ipv6
#     value: '1'
#     state: present    
#   become: yes

# - name: set net.ipv6.conf.default.disable_ipv6 = 1
#   sysctl:
#     name: net.ipv6.conf.default.disable_ipv6
#     value: '1'
#     state: present    
#   become: yes

- name: copy server.crt
  copy: src={{ certificate_path }}/{{ subdomain }}-0001/fullchain1.pem dest=/tmp/server.crt 
  
- name: copy server.key
  copy: src={{ certificate_path }}/{{ subdomain }}-0001/privkey1.pem dest=/tmp/server.key

# Copy and unpack required files 
- name: "unpack {{ controllerfile }} to /tmp"
  unarchive:
    src: "{{ nginx_binary_path }}/{{ controllerfile }}"
    dest: "/tmp"
    remote_src: no

# Run installer
- name: install controller
  shell: > 
    ./install.sh 
    -n -w -y --non-interactive
    --smtp-host localhost --smtp-port 25 --smtp-authentication false --smtp-use-tls false --noreply-address "no-reply@{{ subdomain }}"
    --admin-firstname "{{ firstname }}" --admin-lastname "{{ lastname }}" --admin-email "{{ email }}" --admin-password "{{ password }}"
    --fqdn "{{ controllername }}.{{ subdomain }}" --organization-name "{{ organization }}"
    --apigw-key /tmp/server.key --apigw-cert /tmp/server.crt
    --tsdb-volume-type local
  args:
    chdir: "/tmp/controller-installer"
  become: no
  register: controller_output

# - name: Delete /tmp/server.crt
#   file:
#     path: /tmp/server.crt
#     state: absent
#   become: yes

# - name: Delete /tmp/server.key
#   file:
#     path: /tmp/server.key
#     state: absent
#   become: yes

# Basic setup: license
- name: login to the controller
  uri:
    url: "https://{{ baseurl }}/platform/login"
    method: POST
    body_format: json 
    body: 
      credentials: 
        type: "BASIC"
        username: "{{ email }}"
        password: "{{ password }}"
    status_code: 204
    validate_certs: False
  register: login 

- name: POST license
  uri:
    url: "https://{{ baseurl }}/platform/license-file"
    method: POST
    headers:
      Cookie: "{{ login.set_cookie }}"  
    body_format: json
    body:
      content: "{{ lookup( 'file', '{{ nginx_license_path }}/controller_license.txt' ) | b64encode }}"
    status_code: 200
    validate_certs: False

- name: Enable CAS
  shell: /opt/nginx-controller/helper.sh setfeature AppSec true

# Locations
- name: Create/configure locations
  uri:
    url: "https://{{ baseurl }}/infrastructure/locations/{{ item }}"
    method: PUT
    headers:
      Cookie: "{{ login.set_cookie }}"
    body_format: json
    body:
      metadata:
        name: "{{ item }}"
        displayName: "{{ item }}"
        description: "Multipass environment"
      desiredState:
        type: "OTHER_LOCATION"
    status_code: 200,201,202
    validate_certs: False
  loop:
    - "vmware"
    - "container"